// Prisma schema for Triathlon Training Platform
// Database schema definition with relations and field configurations
// 
// Main entities:
// - User: Application user with authentication
// - Workout: Training session (Swim, Bike, Run)
// - WorkoutLabel: Categories for workout intensity
// - Auth-related models for NextAuth integration

// Database provider configuration
generator client {
  provider = "prisma-client-js"
}

// Data source configuration for PostgreSQL
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
// Central entity for authentication and workout ownership
model User {
  id            String    @id @default(uuid())
  name          String?   // Optional display name
  email         String    @unique // Primary identifier for authentication
  emailVerified DateTime? // For email verification flows (NextAuth)
  image         String?   // Optional profile image URL

  // Relationships
  accounts      Account[]       // OAuth accounts
  sessions      Session[]       // User sessions
  workouts      Workout[]       // User's workout entries
  labels        WorkoutLabel[]  // User's workout labels
  userCredential UserCredential? // Credentials for password authentication

  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// UserCredential Model
// Stores hashed passwords for credential authentication
model UserCredential {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  password  String   // Bcrypt hashed password

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// NextAuth Account Model
// Handles OAuth provider accounts
model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String  // OAuth, email, etc.
  provider           String  // Google, Facebook, etc.
  providerAccountId  String  // ID from the provider

  // OAuth token information
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  // Relationship
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Unique constraint to prevent duplicate accounts
  @@unique([provider, providerAccountId])
}

// NextAuth Session Model
// Manages active user sessions
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// NextAuth Verification Token Model
// For email verification and password reset
model VerificationToken {
  identifier String   // Usually the user's email
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// WorkoutLabel Model
// Categorizes workouts by training intensity
model WorkoutLabel {
  id          String    @id @default(uuid())
  name        String    // Label name (e.g., "Recovery", "Threshold")
  color       String    // Hex color code for visual distinction
  userId      String    // Owner of the label

  // Relationships
  user        User      @relation(fields: [userId], references: [id])
  workouts    Workout[] // Workouts using this label

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Workout Model
// Core entity for tracking training sessions
model Workout {
  id          String        @id @default(uuid())
  type        String        // "Bike", "Run", "Swim"
  title       String        // Workout title
  description String?       // Detailed workout instructions
  duration    Int           // Duration in minutes
  date        DateTime      // Scheduled date and time
  order       Int           @default(0) // For ordering workouts on the same day
  
  // Label relationship (optional)
  labelId     String?       
  label       WorkoutLabel? @relation(fields: [labelId], references: [id])
  
  // User relationship
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  
  // Timestamps
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}